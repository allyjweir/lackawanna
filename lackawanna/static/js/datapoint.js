// Generated by CoffeeScript 1.8.0
var markCurrentCollections, populateCollections, updateDatapoint;

$(document).ready(function() {
    // Required for all interaction with the API (SECURITY!!)
    $.ajaxSetup({
        headers: {
            'X-CSRFToken': $.cookie('csrftoken')
        }
    });

    var datapoint = $("#datapoint-viewer").annotator();

    // transcript.data('annotator').subscribe('rangeNormalizeFail', function (ann, range, err) { console.log(ann, range, err); })

    // Setup the Store plugin. Deals with retrieval and storage of annotations
    datapoint.annotator('addPlugin', 'Store', {
        // Define the URLs for actions related to annotations
        urls: {
            create: '/annotations/',
            update: '/annotations/:id',
            destroy: '/annotations/:id',
            search: '/annotations/search/'
        },

        prefix: '/apiv1',

        // Affix the pathname (i.e. '/datapoint/5' or '/transcript/2' to allow for specified retrieval later)
        annotationData: {
            'uri': window.location.pathname,
            'datapoint': $('#datapoint-pk').text()
        },

        loadFromSearch: {
            'uri': window.location.pathname
        }
    });

    // Initiate the tabs below the datapoint viewer
    $('#dataoint-tabs a:first').tab('show');

    // Initiate the xeditables to allow users to edit the datapoint's information
    $.fn.editable.defaults.mode = 'popup';
    $(".xeditable-datapoint-details").editable({
        url: function(params) {
            var datapoint_pk, updated_data;
            console.log("Time to save x-editable new stuff: " + params.update);
            updated_data = {};
            updated_data[params.name] = params.value;
            datapoint_pk = $("#pk").text();
            return updateDatapoint(datapoint_pk, updated_data);
        }
    });

    // $("#xeditable-tags").editable({
    //     type: 'select2',
    //     url: function(params) {
    //
    //         // Check if tag exists
    //         // If not, make it
    //         // then updateDatapoint with latest list of tags
    //     },
    //     emptytext: 'None',
    //         select2: {
    //             ajax: {
    //                 url: "/apiv1/datapoints/" + $("#pk").text() + "/",
    //                 dataType: 'json',
    //                 data: function
    //             }
    //         }
    // });

    // TODO: Remove testing console.log
    return console.log("Page loaded");
});


//  If the collections button is clicked, load the collections related to the datapoint and
$('#collections-button').click(function() {
    console.log("Collection Button clicked!");
    $("#collections-list").empty();
    $("div > #loading-spinner").show();
    $("#collections-save-button").button("reset");
    return populateCollections();
});

// Save action, collect all the collections that user selected, update those with the datapoint as a memeber
// or remove it
$("#collections-save-button").click(function() {
    var collection, datapoint_pk, selected, updated_data, _i, _len, _ref;
    $("#collections-save-button").button("loading");
    console.log("Save button Clicked");
    selected = [];
    _ref = $("#collections-list input:checkbox:checked");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        collection = _ref[_i];
        selected.push($(collection).prop('value'));
    }
    datapoint_pk = $("#pk").text();
    updated_data = {
        "collections": selected
    };
    updateDatapoint(datapoint_pk, updated_data);
    $("#collections-save-button").button("reset");
    return $("#collection-Modal").hide();
});

// Populate the collections modal dialog
populateCollections = function() {
    return $.ajax("/apiv1/collections", {
        type: "GET",
        dataType: "json",
        data: {
            project: $("#project-pk").text()
        },
        error: function(jqXHR, textStatus, errorThrown) {
            return console.log("Couldn't retrieve the datapoint's project's collections (mouthful): " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
            var collection, _i, _len;
            for (_i = 0, _len = data.length; _i < _len; _i++) {
                collection = data[_i];
                $("#collections-list").append("<input type='checkbox' class='collection-checkbox' id='checkbox-" + collection.pk + "' value='" + collection.pk + "' /> " + collection.name + "<br />");
            }
            return markCurrentCollections();
        }
    });
};

// Marks the collections on the modal dialog that the datapoint is already a member of
markCurrentCollections = function() {
    return $.ajax("/apiv1/datapoints/" + ($("#pk").text()), {
        type: "GET",
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
            console.log("Couldn't retrieve datapoint's info: " + textStatus);
            return null;
        },
        success: function(data, textStatus, jqXHR) {
            var collection, _i, _len, _ref;
            console.log("into success of dp: " + data.collections);
            _ref = data.collections;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                collection = _ref[_i];
                $("#collections-list > #checkbox-" + collection).prop('checked', 'true');
            }
            $("div #loading-spinner").hide();
            return $("div #collections-table").show();
        }
    });
};


$("#tags-button").click(function() {
    console.log("Tags button clicked");
    $("#tags-list").empty();
    $("div > #loading-spinner").show();
    $("#tags-save-button").button("reset");
    return populateTags();
});

// Save action, collect all the collections that user selected, update those with the datapoint as a memeber
// or remove it
$("#tags-save-button").click(function() {
    var tag, datapoint_pk, selected, updated_data, _i, _len, _ref;
    $("#tags-save-button").button("loading");
    console.log("Save button Clicked");
    selected = [];
    _ref = $("#tags-list input:checkbox:checked");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        selected.push($(tag).prop('value'));
    }
    datapoint_pk = $("#pk").text();
    updated_data = {
        "tags": selected
    };
    updateDatapoint(datapoint_pk, updated_data);
    $("#tags-save-button").button("reset");
    updateTagDisplay(updated_data);
    return $("#tags-modal").hide();
});

updateTagDisplay = function(updated_data) {
    console.log("Updating Tag display!")
    var display = $("#tag-display");
    display.empty()
    for (i=0; i < updated_data.tags.length; i++) {
        $.ajax("/apiv1/tags", {
            type: "GET",
            dataType: "json",
            data: {
                id: updated_data.tags[i]
            },
            error: function(jqXHR, textStatus, errorThrown) {
                return console.log("Couldn't retrieve the tags: " + textStatus);
            },
            success: function(data, textStatus, jqXHR) {
                console.log("retrieved tag: " + data);
                display.append ("<h3 style='display:inline;'><span class='label label-default tag'>" + data[0].name + "</span></h3> ")
            }
        });
    }
}

getTagName = function(tag_pk) {

};

// Populate the tags modal dialog
populateTags = function() {
    return $.ajax("/apiv1/tags", {
        type: "GET",
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
            return console.log("Couldn't retrieve the tags: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
            var tag, _i, _len;
            for (_i = 0, _len = data.length; _i < _len; _i++) {
                tag = data[_i];
                $("#tags-list").append("<input type='checkbox' class='tag-checkbox' id='checkbox-" + tag.pk + "' value='" + tag.pk + "' /> " + tag.name + "<br />");
            }
            return markCurrentTags();
        }
    });
};

// Marks the collections on the modal dialog that the datapoint is already a member of
markCurrentTags = function() {
    return $.ajax("/apiv1/datapoints/" + ($("#pk").text()), {
        type: "GET",
        dataType: "json",
        error: function(jqXHR, textStatus, errorThrown) {
            console.log("Couldn't retrieve datapoint's info: " + textStatus);
            return null;
        },
        success: function(data, textStatus, jqXHR) {
            var tags, _i, _len, _ref;
            console.log("into success of dp: " + data.tags);
            _ref = data.tags;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                tag = _ref[_i];
                $("#tags-list > #checkbox-" + tag).prop('checked', 'true');
            }
            $("div #loading-spinner").hide();
            return $("div #tags-list").show();
        }
    });
};

$('#new-tag-create-button').click(function() {
    console.log("new tag created button clicked!!!");
    new_tag = $('#new-tag').val();
    console.log("new tag is: " + new_tag);
    $('#new-tag').empty()
    $.ajax("/apiv1/tags/", {
        type: "POST",
        dataType: "json",
        data: {
            name: new_tag
        },
        error: function(jqXHR, textStatus, errorThrown) {
            return console.log("Couldn't retrieve the tags: " + textStatus);
        },
        success: function(tag, textStatus, jqXHR) {
            console.log("new tag created!: " + tag);
            $("#tags-list").append("<input type='checkbox' class='tag-checkbox' id='checkbox-" + tag.pk + "' value='" + tag.pk + "' /> " + tag.name + "<br />");
        }
    });
    $('#new-tag-modal').hide();
})



// Retrieves the latest information about the datapoint from the API.
getDatapoint = function () {
    return $.ajax('/apiv1/datapoints', {
        type: "GET",
        dataType: 'json',
        data: {
            pk: $('#datapoint-pk').text()
        },
        error: function(jqXHR, textStatus, errorThrown) {
            return console.log("Couldn't retrieve the datapoint: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
            console.log("payload: " + data)
            return data;
        }
    });
};

// Update a datapoint with new data.
// This comes from the x-editables and tags
updateDatapoint = function(datapoint_pk, updated_data) {
    return $.ajax("/apiv1/datapoints/" + datapoint_pk + '/', {
        headers: {
            'X-CSRFToken': $.cookie('csrftoken')
        },
        type: "patch",
        dataType: "json",
        traditional: true,
        data: updated_data,
        error: function(jqXHR, textStatus, errorThrown) {
            return console.log("failed to save updated datapoint: " + textStatus);
        },
        success: function(data, textStatus, jqXHR) {
            return console.log("successfully updated datapoint");
        }
    });
};
